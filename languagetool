#!/usr/bin/env python

from argparse import ArgumentParser, Namespace
from dataclasses import dataclass
from enum import Enum, auto
from json import dump, loads
from sys import stderr, stdin, stdout
from typing import Optional, Sequence, Union
from urllib.parse import quote
from urllib.request import HTTPError, Request

from std2.pickle import decode, encode
from std2.types import never
from std2.urllib import urlopen


@dataclass(frozen=True)
class _DataNode1:
    markup: str


@dataclass(frozen=True)
class _DataNode2:
    text: str


_Data = Sequence[Union[_DataNode1, _DataNode2]]


@dataclass(frozen=True)
class _Req:
    text: Optional[str]
    data: Optional[_Data]
    language: str = "auto"


@dataclass(frozen=True)
class _Lang:
    name: str


@dataclass(frozen=True)
class _Replacement:
    value: str


@dataclass(frozen=True)
class _Context:
    text: str
    offset: int
    length: int


@dataclass(frozen=True)
class _Match:
    message: str
    shortMessage: str
    offset: int
    length: int
    context: _Context
    replacements: Sequence[_Replacement]


@dataclass(frozen=True)
class _Resp:
    language: _Lang
    matches: Sequence[_Match]


class _PrintFmt(Enum):
    json = auto()


def _parse_args() -> Namespace:
    parser = ArgumentParser()
    parser.add_argument("server")
    parser.add_argument(
        "-f",
        "--format",
        choices=tuple(p.name for p in _PrintFmt),
        default=_PrintFmt.json.name,
    )
    return parser.parse_args()


def main() -> None:
    args = _parse_args()
    fmt = _PrintFmt[args.format]

    url = f"{args.server}/v2/check"
    headers = {
        "Content-Type": " application/x-www-form-urlencoded",
        "Accept": "application/json",
    }
    form_data = {"language": "auto", "text": stdin.read()}

    data = "&".join(f"{key}={quote(val)}" for key, val in form_data.items()).encode()
    req = Request(url=url, headers=headers, data=data)

    try:
        with urlopen(req) as resp:
            reply = resp.read().decode()
    except HTTPError as e:
        print(e, file=stderr)
    else:
        json = loads(reply)
        linted: _Resp = decode(_Resp, json, strict=False)

        if fmt is _PrintFmt.json:
            dump(encode(linted), fp=stdout, check_circular=False, ensure_ascii=False)
        else:
            never(fmt)


main()
