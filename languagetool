#!/usr/bin/env python

from argparse import ArgumentParser, Namespace
from dataclasses import dataclass
from email.mime.multipart import MIMEMultipart
from email.mime.nonmultipart import MIMENonMultipart
from json import loads
from sys import stderr, stdin
from typing import Any, Mapping, Optional, Sequence, Union
from urllib.request import HTTPError, Request

from std2.pickle import decode
from std2.urllib import urlopen


def encode_form_data(fields: Mapping[str, Any]) -> MIMEMultipart:
    m = MIMEMultipart("form-data")

    for key, val in fields.items():
        part = MIMENonMultipart("text", "plain")
        part.add_header("Content-Disposition", f'form-data; name="{key}"')
        part.set_payload(val)
        m.attach(part)

    return m


@dataclass(frozen=True)
class _DataNode1:
    markup: str


@dataclass(frozen=True)
class _DataNode2:
    text: str


_Data = Sequence[Union[_DataNode1, _DataNode2]]


@dataclass(frozen=True)
class _Req:
    text: Optional[str]
    data: Optional[_Data]
    language: str = "auto"


@dataclass(frozen=True)
class _Replacement:
    value: str


@dataclass(frozen=True)
class _Match:
    message: str
    shortMessage: str
    replacements: Sequence[_Replacement]


@dataclass(frozen=True)
class _Context:
    text: str
    offset: int
    length: int


@dataclass(frozen=True)
class _Resp:
    matches: Sequence[_Match]
    offset: int
    length: int
    context: _Context


def _parse_args() -> Namespace:
    parser = ArgumentParser()
    parser.add_argument("server")
    return parser.parse_args()


def main() -> None:
    args = _parse_args()
    url = f"{args.server}/v2/check"
    form_data = {
        "language": "auto",
        "text": "cryging"
    }
    data = encode_form_data(form_data).as_bytes()
    req = Request(url=url, data=data)

    try:
        with urlopen(req) as resp:
            reply = resp.read()
    except HTTPError as e:
        print(e, file=stderr)
    else:
        # json = loads(reply)
        # fuck: _Resp = decode(_Resp, json)

        print(reply)



main()
